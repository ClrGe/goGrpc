// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.1
// source: frequentationPB/frequentation.proto

package frequentationPB

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrequentationClient is the client API for Frequentation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrequentationClient interface {
	ReadStations(ctx context.Context, in *FrequentationRequest, opts ...grpc.CallOption) (*FrequentationResponse, error)
}

type frequentationClient struct {
	cc grpc.ClientConnInterface
}

func NewFrequentationClient(cc grpc.ClientConnInterface) FrequentationClient {
	return &frequentationClient{cc}
}

func (c *frequentationClient) ReadStations(ctx context.Context, in *FrequentationRequest, opts ...grpc.CallOption) (*FrequentationResponse, error) {
	out := new(FrequentationResponse)
	err := c.cc.Invoke(ctx, "/frequentation.Frequentation/ReadStations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrequentationServer is the server API for Frequentation service.
// All implementations must embed UnimplementedFrequentationServer
// for forward compatibility
type FrequentationServer interface {
	ReadStations(context.Context, *FrequentationRequest) (*FrequentationResponse, error)
	mustEmbedUnimplementedFrequentationServer()
}

// UnimplementedFrequentationServer must be embedded to have forward compatible implementations.
type UnimplementedFrequentationServer struct {
}

func (UnimplementedFrequentationServer) ReadStations(context.Context, *FrequentationRequest) (*FrequentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadStations not implemented")
}
func (UnimplementedFrequentationServer) mustEmbedUnimplementedFrequentationServer() {}

// UnsafeFrequentationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrequentationServer will
// result in compilation errors.
type UnsafeFrequentationServer interface {
	mustEmbedUnimplementedFrequentationServer()
}

func RegisterFrequentationServer(s grpc.ServiceRegistrar, srv FrequentationServer) {
	s.RegisterService(&Frequentation_ServiceDesc, srv)
}

func _Frequentation_ReadStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrequentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequentationServer).ReadStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frequentation.Frequentation/ReadStations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequentationServer).ReadStations(ctx, req.(*FrequentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Frequentation_ServiceDesc is the grpc.ServiceDesc for Frequentation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Frequentation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frequentation.Frequentation",
	HandlerType: (*FrequentationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadStations",
			Handler:    _Frequentation_ReadStations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frequentationPB/frequentation.proto",
}
